#!/usr/bin/python2
from nagioscheck import NagiosCheck, UsageError
from nagioscheck import PerformanceMetric, Status
import urllib2
import optparse

try:
    import json
except ImportError:
    import simplejson as json


class ESJVMHealthCheck(NagiosCheck):

    def __init__(self):

        NagiosCheck.__init__(self)

        self.add_option('H', 'host', 'host', 'The cluster to check')
        self.add_option('P', 'port', 'port', 'The ES port - defaults to 9200')
        self.add_option('N', 'node', 'node',
                        'The node member of the cluster to check'
                        ' - Must be an IP Address')
        self.add_option('C', 'critical_threshold', 'critical_threshold',
                        'The level at which we throw a CRITICAL alert'
                        ' - defaults to 97% of the JVM setting')
        self.add_option('W', 'warning_threshold', 'warning_threshold',
                        'The level at which we throw a WARNING alert'
                        ' - defaults to 90% of the JVM setting')

    def check(self, opts, args):
        host = opts.host or 'localhost'
        port = int(opts.port or '9200')
        node = opts.node
        critical = int(opts.critical_threshold or '97')
        warning = int(opts.warning_threshold or '90')
        try:
            if node is None:
               response = urllib2.urlopen(r'http://%s:%d/_nodes/stats/jvm'
                                         % (host, port))
            else:
               response = urllib2.urlopen(r'http://%s:%d/_nodes/%s/stats/jvm'
                                         % (host, port, node))
        except urllib2.HTTPError, e:
            raise Status('unknown', ("API failure", None,
                                     "API failure:\n\n%s" % str(e)))
        except urllib2.URLError, e:
            raise Status('critical', (e.reason))

        response_body = response.read()
        try:
            nodes_jvm_data = json.loads(response_body)
        except ValueError:
            raise Status('unknown', ("API returned nonsense",))

        criticals = 0
        critical_details = []
        critical_message = []
        warnings = 0
        warning_details = []
        warning_message = []
        message = []

        nodes = nodes_jvm_data['nodes']
        if len(nodes) == 0:
            raise Status('unknown', ("The Node %s is not a cluster member" % node,))

        for node in nodes:
            jvm_percentage = nodes[node]['jvm']['mem']['heap_used_percent']
            node_name = nodes[node]['host']
            if int(jvm_percentage) >= critical:
                criticals = criticals + 1
                critical_details.append("%s=%s%% " % (node_name, jvm_percentage))
                critical_message.append("%s=%s%%;%s;%s" % (node_name,jvm_percentage, warning, critical))
            elif (int(jvm_percentage) >= warning and
                  int(jvm_percentage) < critical):
                warnings = warnings + 1
                warning_details.append("%s=%s%% " % (node_name, jvm_percentage))
                warning_message.append("%s=%s%%;%s;%s" % (node_name,jvm_percentage, warning, critical))
            else:
                message.append("%s=%s%%;%s;%s" % (node_name,jvm_percentage, warning, critical))
        if criticals > 0:
            raise Status("Critical",
                         "The following node(s) in the cluster have breached "
                         "the %% JVM mem usage critical threshold of %s%%: %s | %s"
                         % (
                             critical,
                             str(" ".join(critical_details)),
                             str(" ".join(critical_message))
                             ))
        elif warnings > 0:
            raise Status("Warning",
                         "The following node(s) in the cluster have breached"
                         "the %% JVM mem usage warning threshold of %s%%: %s | %s"
                         % (
                             warning,
                             str(" ".join(warning_details)),
                             str(" ".join(warning_message))
                         ))
        else:
            raise Status("OK", "All nodes in the cluster are currently below "
                         "the %% JVM mem warning threshold | %s" % (str(" ".join(message))) )

if __name__ == "__main__":
    ESJVMHealthCheck().run()
